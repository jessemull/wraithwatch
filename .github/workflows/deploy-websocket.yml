name: Deploy WebSocket Server

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'apps/realtime-api/**'
      - '.github/workflows/deploy-websocket.yml'

jobs:
  deploy-websocket:
    name: Deploy WebSocket Server to ECS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Lint Code
        run: |
          yarn workspace @wraithwatch/realtime-api lint

      - name: Build TypeScript
        run: |
          yarn workspace @wraithwatch/realtime-api build

      - name: Set Up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log Into AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        run: |
          docker build -f apps/realtime-api/Dockerfile -t wraithwatch-websocket:$GITHUB_SHA .
          docker tag wraithwatch-websocket:$GITHUB_SHA ${{ steps.login-ecr.outputs.registry }}/wraithwatch-websocket:$GITHUB_SHA

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/wraithwatch-websocket:$GITHUB_SHA
          echo "CONTAINER_IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/wraithwatch-websocket:$GITHUB_SHA" >> $GITHUB_ENV

      - name: Get Target Group ARN
        id: get-target-group
        run: |
          TARGET_GROUP_ARN=$(aws cloudformation describe-stacks \
            --stack-name wraithwatch-websocket-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`TargetGroupArn`].OutputValue' \
            --output text)
          echo "Target Group ARN: $TARGET_GROUP_ARN"
          echo "target-group-arn=$TARGET_GROUP_ARN" >> $GITHUB_OUTPUT

      - name: Deploy Task Definition
        run: |
          aws cloudformation deploy \
            --stack-name wraithwatch-websocket-task \
            --template-file infrastructure/wraithwatch-websocket-task-definition.yaml \
            --parameter-overrides \
              ContainerImage=${{ env.CONTAINER_IMAGE_URI }} \
              Environment=main \
              ECSClusterName=wraithwatch-websocket-stack-Cluster \
              TargetGroupArn=${{ steps.get-target-group.outputs.target-group-arn }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region us-east-1

      - name: Wait for Task Definition to be Available
        run: |
          echo "Waiting for task definition to be available..."
          sleep 30

      - name: Update ECS Service
        run: |
          SERVICE_NAME="wraithwatch-websocket-service"

          # Force new deployment
          aws ecs update-service \
            --cluster wraithwatch-websocket-stack-Cluster \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --region us-east-1

      - name: Wait for Service to be Stable
        run: |
          aws ecs wait services-stable \
            --cluster wraithwatch-websocket-stack-Cluster \
            --services wraithwatch-websocket-service \
            --region us-east-1

      - name: Get WebSocket URL
        id: deploy-websocket
        run: |
          WEBSOCKET_URL=$(aws cloudformation describe-stacks \
            --stack-name wraithwatch-websocket \
            --query 'Stacks[0].Outputs[?OutputKey==`WebSocketURL`].OutputValue' \
            --output text)
          echo "WebSocket URL: $WEBSOCKET_URL"
          echo "websocket-url=$WEBSOCKET_URL" >> $GITHUB_OUTPUT

      - name: Comment Deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `WebSocket server deployed successfully!\n\n **WebSocket URL**: ${{ steps.deploy-websocket.outputs.websocket-url }}\n **Deployed at**: ${new Date().toISOString()}`
            })
        if: github.event_name == 'pull_request'
