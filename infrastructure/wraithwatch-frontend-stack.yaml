AWSTemplateFormatVersion: '2010-09-09'
Description: 'Wraithwatch Frontend - S3 Static Website with CloudFront'

Parameters:
  DomainName:
    Type: String
    Description: 'Domain name for the website (e.g., www.wraithwatch-demo.com)'
    Default: 'www.wraithwatch-demo.com'
  
  RootDomainName:
    Type: String
    Description: 'Root domain name (e.g., wraithwatch-demo.com)'
    Default: 'wraithwatch-demo.com'

  CertificateArn:
    Type: String
    Description: 'ARN of the SSL certificate for the domain'
    Default: ''

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref CertificateArn, '']]

Resources:
  # S3 Bucket for static website hosting...

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'wraithwatch-frontend'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 Bucket Policy for CloudFront access...

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: CloudFrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${WebsiteBucket}/*'

  # CloudFront Origin Access Identity...

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${DomainName}'

  # CloudFront Distribution...

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'CloudFront distribution for ${DomainName} and ${RootDomainName}'
        Enabled: true
        DefaultRootObject: index.html
        Aliases: !If
          - HasCustomDomain
          - [!Ref DomainName, !Ref RootDomainName]
          - !Ref AWS::NoValue
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        ViewerCertificate: !If
          - HasCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true

Outputs:
  WebsiteBucketName:
    Description: 'Name of S3 bucket to hold website content'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucketName'

  CloudFrontDistributionId:
    Description: 'ID of CloudFront distribution'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDomainName:
    Description: 'Domain name of CloudFront distribution'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomainName'

  WebsiteURL:
    Description: 'URL of the website'
    Value: !If
      - HasCustomDomain
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'
