name: Deploy Lambda@Edge

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
  
jobs:
  deploy-lambda:
    name: Deploy Lambda At Edge
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: |
          cd apps/lambda-at-edge
          npm ci

      - name: Lint Code
        run: |
          cd apps/lambda-at-edge
          npm run lint

      - name: Run Unit Tests
        run: |
          cd apps/lambda-at-edge
          npm test

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: apps/lambda-at-edge/coverage
          retention-days: 7

      - name: Coverage Threshold Check
        run: |
          cd apps/lambda-at-edge
          if [[ $(grep "Statements" coverage/lcov-report/index.html | awk '{print $4}' | tr -d '%') -lt 80 ]]; then
            echo "Code coverage is below threshold. Please update test coverage and try again."
            exit 1
          fi

      - name: Set Up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Lambda Package
        run: |
          cd apps/lambda-at-edge
          export NODE_ENV="${{ github.event.inputs.environment }}"
          npm run build
          npm run package

      - name: Generate Artifact Name
        run: |
          cd apps/lambda-at-edge
          COMMIT_HASH=$(git rev-parse --short HEAD)
          VERSION=$(jq -r .version < package.json)
          TIMESTAMP=$(date -u +"%Y%m%dT%H%M%SZ")
          ARTIFACT_NAME="wraithwatch-lambda-at-edge-${VERSION}-${COMMIT_HASH}-${TIMESTAMP}.zip"
          echo "Artifact: $ARTIFACT_NAME"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          
      - name: Upload Lambda to S3
        run: |
          cd apps/lambda-at-edge
          S3_BUCKET="wraithwatch-lambda-at-edge-${{ github.event.inputs.environment }}"
          aws s3 cp "dist/wraithwatch-lambda-at-edge.zip" s3://${S3_BUCKET}/wraithwatch-lambda-at-edge/${ARTIFACT_NAME} --region us-east-1

      - name: Check Change Set Update/Create 
        id: change_set_type
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STACK_NAME="wraithwatch-lambda-at-edge-stack-${{ github.event.inputs.environment }}"
          if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region us-east-1 >/dev/null 2>&1; then
            echo "Updating change set..."
            echo "change_set_type=UPDATE" >> $GITHUB_ENV
          else
            echo "Creating change set..."
            echo "change_set_type=CREATE" >> $GITHUB_ENV
          fi

      - name: Check Stack Status
        id: stack_status
        if: env.change_set_type == 'UPDATE'
        run: |
          STACK_NAME="wraithwatch-lambda-at-edge-stack-${{ github.event.inputs.environment }}"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")
          echo "Status: $STATUS"
          FAILED_STATES=("CREATE_FAILED" "ROLLBACK_FAILED" "UPDATE_FAILED" "DELETE_FAILED" "UPDATE_ROLLBACK_FAILED" "UPDATE_ROLLBACK_COMPLETE" "ROLLBACK_COMPLETE")
          if [[ " ${FAILED_STATES[@]} " =~ " ${STATUS} " ]]; then
            echo "Deleting stack due to status..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME" --region us-east-1
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" --region us-east-1
            echo "Stack deleted successfully!"
            echo "change_set_type=CREATE" >> $GITHUB_ENV
          fi

      - name: Create CloudFormation Change Set
        run: |
          cd apps/lambda-at-edge
          ENVIRONMENT=${{ github.event.inputs.environment }}
          STACK_NAME="wraithwatch-lambda-at-edge-stack-${{ github.event.inputs.environment }}"
          TEMPLATE_FILE="template.yaml"
          CHANGE_SET_NAME="wraithwatch-lambda-at-edge-change-set-${{ github.event.inputs.environment }}"
          CHANGE_SET_TYPE=${{ env.change_set_type }}
          aws cloudformation create-change-set \
            --stack-name $STACK_NAME \
            --template-body file://$TEMPLATE_FILE \
            --parameters \
              "ParameterKey=S3Key,ParameterValue=wraithwatch-lambda-at-edge/${ARTIFACT_NAME}" \
              "ParameterKey=Environment,ParameterValue=${ENVIRONMENT}" \
            --change-set-name $CHANGE_SET_NAME \
            --change-set-type $CHANGE_SET_TYPE \
            --capabilities CAPABILITY_NAMED_IAM \
            --region us-east-1
          echo "Waiting for change set to be created..."
          aws cloudformation wait change-set-create-complete \
            --stack-name $STACK_NAME \
            --change-set-name $CHANGE_SET_NAME \
            --region us-east-1

      - name: Check for Applied Changes
        run: |
          STACK_NAME="wraithwatch-lambda-at-edge-stack-${{ github.event.inputs.environment }}"
          CHANGE_SET_NAME="wraithwatch-lambda-at-edge-change-set-${{ github.event.inputs.environment }}"
          CHANGES=$(aws cloudformation describe-change-set \
                    --stack-name $STACK_NAME \
                    --change-set-name $CHANGE_SET_NAME \
                    --query "Changes" \
                    --region us-east-1)
          if [ "$(echo "$CHANGES" | jq length)" -eq 0 ]; then
            echo "No changes in the change set, skipping execution."
            echo "no_changes=true" >> $GITHUB_ENV
          else
            echo "Changes detected, proceeding with execution."
            echo "no_changes=false" >> $GITHUB_ENV
          fi

      - name: Execute CloudFormation Change Set
        if: env.no_changes == 'false'
        run: |
          STACK_NAME="wraithwatch-lambda-at-edge-stack-${{ github.event.inputs.environment }}"
          CHANGE_SET_NAME="wraithwatch-lambda-at-edge-change-set-${{ github.event.inputs.environment }}"
          aws cloudformation execute-change-set \
            --stack-name $STACK_NAME \
            --change-set-name $CHANGE_SET_NAME \
            --region us-east-1

      - name: Monitor CloudFormation Stack Status
        if: env.no_changes == 'false'
        run: |
          DONE_STATUSES=("CREATE_COMPLETE" "UPDATE_COMPLETE" "ROLLBACK_COMPLETE" "UPDATE_ROLLBACK_COMPLETE" "DELETE_COMPLETE")
          FAILED_STATUSES=("CREATE_FAILED" "UPDATE_FAILED" "ROLLBACK_FAILED" "DELETE_FAILED" "UPDATE_ROLLBACK_FAILED" "ROLLBACK_IN_PROGRESS" "DELETE_IN_PROGRESS")
          STACK_NAME="wraithwatch-lambda-at-edge-stack-${{ github.event.inputs.environment }}"
          MAX_RETRIES=30
          RETRY_COUNT=0
          while true; do
            STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region us-east-1 --query "Stacks[0].StackStatus" --output text)
            echo "Status: $STATUS"
            if [[ " ${DONE_STATUSES[@]} " =~ " ${STATUS} " ]]; then
              echo "Stack update completed successfully!"
              echo "Status: $STATUS"
              break
            # Check if the status is one of the 'failed' statuses
            elif [[ " ${FAILED_STATUSES[@]} " =~ " ${STATUS} " ]]; then
              echo "Stack failed to update!"
              echo "Status: $STATUS"
              aws cloudformation describe-stack-events --stack-name $STACK_NAME --region us-east-1 --query "StackEvents[?ResourceStatus=='$STATUS'].[LogicalResourceId, ResourceStatus, ResourceStatusReason]" --output table
              exit 1
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [[ $RETRY_COUNT -ge $MAX_RETRIES ]]; then
              echo "Max retries reached, exiting."
              exit 1
            fi
            echo "Checking status..."
            sleep 10
          done
      
      - name: Prune Backups
        run: |
          S3_BUCKET="wraithwatch-lambda-at-edge-${{ github.event.inputs.environment }}"
          OBJECTS=$(aws s3 ls s3://${S3_BUCKET}/wraithwatch-lambda-at-edge/ | sort | awk '{print $4}')
          TOTAL_OBJECTS=$(echo "$OBJECTS" | wc -l)
          if [ "$TOTAL_OBJECTS" -gt 5 ]; then
            OBJECTS_TO_DELETE=$(echo "$OBJECTS" | head -n $(($TOTAL_OBJECTS - 5)))
            for OBJ in $OBJECTS_TO_DELETE; do
              aws s3 rm s3://${S3_BUCKET}/wraithwatch-lambda-at-edge/$OBJ
            done
          else
            echo "Less than 5 objects found, no pruning needed..."
          fi 